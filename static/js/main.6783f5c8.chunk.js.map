{"version":3,"sources":["assets/tokyo2020.png","assets/emojis.png","assets/wvd.png","assets/personalizer.png","assets/eod.png","serviceWorker.ts","components/header.tsx","components/title.tsx","components/what-i-do.tsx","components/what-i-know.tsx","components/project.tsx","components/what-have-i-done.tsx","components/misc.tsx","components/footer.tsx","main.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","descLen","length","Header","props","useState","desc","setDesc","flicker","setFlickering","name","useEffect","interval","setInterval","clearInterval","setTimeout","timeout","j","slice","className","Title","title","bgBlack","black","attributes","WhatIDo","map","attribute","idx","key","WhatIKnow","Project","isMobile","setMobile","innerWidth","img","description","techStack","left","link","src","alt","href","target","rel","tech","personalizer","emojis","tokyo2020","wvd","eod","WhatIveDone","Misc","Footer","Main","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6783f5c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tokyo2020.2c7c88ac.png\";","module.exports = __webpack_public_path__ + \"static/media/emojis.439c9060.png\";","module.exports = __webpack_public_path__ + \"static/media/wvd.cb863dca.png\";","module.exports = __webpack_public_path__ + \"static/media/personalizer.3c4279c3.png\";","module.exports = __webpack_public_path__ + \"static/media/eod.7c4bc25b.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\n\ninterface HeaderProps {\n  name: string;\n}\n\nconst description = `Software Developer`;\nconst descLen = description.length;\n\nconst Header = (props: HeaderProps): JSX.Element => {\n  const [desc, setDesc] = useState('');\n  const [flicker, setFlickering] = useState(true);\n  const { name } = props;\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setFlickering(!flicker);\n    }, 750);\n    return () => clearInterval(interval);\n  }, [flicker, setFlickering]);\n\n  useEffect(() => {\n    const timeout = (j: number) => {\n      setTimeout(() => {\n        setDesc(description.slice(0, j));\n        if (j < descLen) {\n          timeout(++j);\n        }\n      }, 100);\n    };\n    setTimeout(() => {\n      timeout(0);\n    }, 2000);\n  }, []);\n\n  return (\n    <div className='flex flex-col bg-black w-full h-48 justify-center items-center mb-6'>\n      <span className='text-white text-3xl sm:text-4xl lg:text-5xl font-bold'>\n        {name}\n      </span>\n      <div className='flex'>\n        <span className='text-white text-2xl sm:text-3xl lg:text-4xl mr-2'>{`$${desc}`}</span>\n        <div\n          className={`bg-white px-2 my-2 ${flicker ? 'invisible' : ''}`}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\ninterface TitleProps {\n  title: string;\n  black?: boolean;\n}\n\nconst Title = (props: TitleProps): JSX.Element => {\n  const { title, black } = props;\n  const bgBlack = black ? 'bg-black text-white' : '';\n  return (\n    <span\n      className={`flex font-bold text-xl uppercase mb-4 justify-center border-8 border-black p-2 ${bgBlack}`}>\n      {title}\n    </span>\n  );\n};\n\nexport default Title;\n","import React from 'react';\nimport Title from './title';\n\nconst attributes = [\n  'Create fun projects in my spare time',\n  'Write quality code',\n  'Keep my functions small, focused, and easy to understand',\n  'Leave comments as I create and maintain code',\n  'Document every feature',\n  'Keep track of every bug',\n  'Strictly follow security best practices',\n  'Never stop learning',\n];\n\nconst WhatIDo = (): JSX.Element => {\n  return (\n    <div className='flex flex-col w-full mb-4'>\n      <Title title='What do I do?' />\n      {attributes.map((attribute, idx) => (\n        <span\n          key={`${attribute}-${idx}`}\n          className='text-base my-2 text-center'>\n          {attribute}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default WhatIDo;\n","import React from 'react';\nimport Title from './title';\n\nconst attributes = [\n  `How to work with Javascript, Typescript HTML/CSS, C#, GO & NodeJs as industry experience.`,\n  `How to handle Java & Objective-C for a mix-native project.`,\n  `How to work with JS frameworks such as React, Angular and React-native.`,\n  `How to manage both SQL and noSQL databases, mainly MSSQL & DynamoDB - respectively.`,\n  `How to create and/or use APIs.`,\n  `How to configure and use a feature/dev/master branch workflow in Git.`,\n  `How to configure and use serverless services, such as AWS and Azure.`,\n  `Currently studying to get the AWS Developer - Associate certification, so ask me anything serverless related.`,\n];\n\nconst WhatIKnow = (): JSX.Element => {\n  return (\n    <div className='flex flex-col w-full mb-4'>\n      <Title title='what do i know?' black />\n      {attributes.map((attribute, idx) => (\n        <span key={`${attribute}-${idx}`} className='text-base my-2 text-left'>\n          {`> ${attribute}`}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default WhatIKnow;\n","import React, { useState, useEffect } from 'react';\n\nexport interface ProjectProps {\n  img: string;\n  title: string;\n  description: string;\n  techStack: string[];\n  left: boolean;\n  link?: string;\n}\n\nconst Project = (props: ProjectProps): JSX.Element => {\n  const [isMobile, setMobile] = useState(false);\n  const { innerWidth } = window;\n  const { img, title, description, techStack, left, link } = props;\n\n  useEffect(() => {\n    if (innerWidth < 768) {\n      setMobile(true);\n    } else {\n      setMobile(false);\n    }\n  }, [innerWidth]);\n\n  return (\n    <div className='flex flex-col md:flex-row w-full'>\n      {!isMobile && !left && (\n        <div className='flex my-auto mt-4'>\n          <img src={img} alt='' className='yeet rounded' />\n        </div>\n      )}\n      <div className='flex flex-col border mx-2 rounded'>\n        <a\n          href={link}\n          target='_blank'\n          rel='noopener noreferrer'\n          className={`flex justify-center mt-4 font-bold text-xl ${\n            link ? 'text-indigo-500' : ''\n          }`}>\n          {title}\n        </a>\n        <span className='flex justify-center mt-4 p-2 text-base'>\n          {description}\n        </span>\n        <div className='flex flex-wrap justify-center mt-4'>\n          {techStack.map((tech, idx) => (\n            <span\n              className='border rounded p-1 m-1 bg-indigo-100 font-bold text-base'\n              key={`${tech}-${idx}`}>\n              {tech}\n            </span>\n          ))}\n        </div>\n      </div>\n      {(left || isMobile) && (\n        <div className='flex my-auto mt-4'>\n          <img src={img} alt='' className='yeet rounded' />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Project;\n","import React from 'react';\nimport Project, { ProjectProps } from './project';\nimport Title from './title';\nimport tokyo2020 from '../assets/tokyo2020.png';\nimport emojis from '../assets/emojis.png';\nimport wvd from '../assets/wvd.png';\nimport personalizer from '../assets/personalizer.png';\nimport eod from '../assets/eod.png';\n\nconst attributes: ProjectProps[] = [\n  {\n    title: 'Azure Personalizer demo',\n    description:\n      'A demo application using Azure Personalizer to display content based on previous user interactions',\n    techStack: [\n      'React',\n      'Typescript',\n      'Azure Serverless',\n      'UX Design',\n      'Figma',\n    ],\n    img: personalizer,\n    left: true,\n    link: 'https://personalizer-webinar.azurewebsites.net/index.html',\n  },\n  {\n    title: 'Emoji for your commits',\n    description:\n      'I made this single page application to standarize the use of emojis on your commits',\n    techStack: ['React', 'Typescript', 'AWS Serverless'],\n    img: emojis,\n    left: false,\n    link: 'https://gabriel1536.github.io/emojicommit/',\n  },\n  {\n    title: 'Tokyo 2020 Olympics',\n    description: 'Multimedia mobile app developed in React-Native',\n    techStack: ['React-Native', 'Typescript', 'AWS Serverless', 'Jest/Enzyme'],\n    img: tokyo2020,\n    left: true,\n  },\n  {\n    title: 'Windows Virtual Desktop',\n    description:\n      'WVD is an extension for the Azure portal in which I participated in the development along with my team',\n    techStack: [\n      'Typescript',\n      'KnockoutJs',\n      'Azure Serverless',\n      'Selenium',\n      '.NET 4.6.2',\n    ],\n    img: wvd,\n    left: false,\n    link: 'https://azure.microsoft.com/en-us/services/virtual-desktop/',\n  },\n  {\n    title: 'End of Day mail generator',\n    description:\n      'Automated reporting tool to track daily and weekly backlogs and the work that has been done each day',\n    techStack: ['Razor', 'Net Core', 'Azure Serverless'],\n    img: eod,\n    left: true,\n  },\n];\n\nconst WhatIveDone = (): JSX.Element => {\n  return (\n    <div className='flex flex-col w-full mb-4'>\n      <Title title={`What I've worked on`} />\n      {attributes.map((attribute: ProjectProps, idx: number) => (\n        <span key={`${attribute}-${idx}`} className='text-lg my-4 text-center'>\n          <Project {...attribute} />\n          {idx < attributes.length - 1 && (\n            <div className='mt-16 mb-10 border-t'></div>\n          )}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default WhatIveDone;\n","import React from 'react';\n\ninterface MiscProps {\n  title: string;\n  link?: string;\n  description: JSX.Element;\n}\n\nconst attributes: MiscProps[] = [\n  {\n    title: 'What is southworks?',\n    description: (\n      <span className='flex text-center text-base px-10'>\n        {`I've been employed since April 2019. My responsibilities vary between\n        projects. I've been a React dev, a React-native dev, a .NET dev, a\n        KnockoutJs dev. Got my hands dirty using serverless services, mainly\n        Azure and AWS.`}\n      </span>\n    ),\n    link: 'https://www.southworks.com/',\n  },\n  {\n    title: 'Do i have a GitHub?',\n    description: (\n      <div className='flex flex-col text-xs'>\n        <span>I have two</span>\n        <div className='flex flex-row justify-center'>\n          <a\n            className={`font-bold text-base uppercase text-blue-600 m-2 py-1 px-2 border rounded hover:bg-blue-100`}\n            href='https://github.com/gabriel1536'\n            target='_blank'\n            rel='noopener noreferrer'>\n            Personal\n          </a>\n          <a\n            className={`font-bold text-base uppercase text-blue-600 m-2 py-1 px-2 border rounded hover:bg-blue-100`}\n            href='https://github.com/gantelo'\n            target='_blank'\n            rel='noopener noreferrer'>\n            Work\n          </a>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: 'Do i have a pdf resume?',\n    description: (\n      <div className='flex flex-col text-xs items-center'>\n        <a\n          className={`font-bold text-base uppercase text-white bg-blue-600 m-2 py-1 px-2 border rounded hover:bg-white hover:text-blue-600`}\n          href='https://gabriel1536.github.io/resume/'\n          target='_blank'\n          rel='noopener noreferrer'>\n          yes\n        </a>\n      </div>\n    ),\n  },\n  {\n    title: 'What is my contact?',\n    description: (\n      <div className='flex flex-col text-xs items-center'>\n        <a\n          className={`font-bold text-base uppercase text-blue-600`}\n          href='mailto:gabriel1536@gmailcom'\n          target='_blank'\n          rel='noopener noreferrer'>\n          gabriel1536@gmailcom\n        </a>\n        <span className='mt-2 text-base'>(+54) 341-2293380</span>\n      </div>\n    ),\n  },\n];\n\nconst Misc = (): JSX.Element => {\n  return (\n    <div className='flex flex-col w-full mt-4 py-4 border-t'>\n      {attributes.map((attribute: MiscProps, idx: number) => (\n        <span\n          key={`${attribute}-${idx}`}\n          className='flex flex-col text-lg my-4 text-center'>\n          <a\n            className={`font-bold text-2xl uppercase ${\n              attribute.link ? 'text-blue-600' : ''\n            } mb-10`}\n            href={attribute.link}\n            target='_blank'\n            rel='noopener noreferrer'>\n            {attribute.title}\n          </a>\n          {attribute.description}\n          {idx < attributes.length - 1 && (\n            <div className='mt-4 mb-4 border-t'></div>\n          )}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Misc;\n","import React from 'react';\n\nconst Footer = (): JSX.Element => {\n  return (\n    <div className='flex flex-col w-full mt-4 py-4 border-t items-center'>\n      <span className='text-xs'>Thanks for reading!</span>\n      <a\n        className={`font-bold text-xs uppercase text-blue-600 mt-2`}\n        href='https://github.com/gabriel1536/about-me'\n        target='_blank'\n        rel='noopener noreferrer'>\n        View the source code\n      </a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/header';\nimport WhatIDo from './components/what-i-do';\nimport WhatIKnow from './components/what-i-know';\nimport WhatIveDone from './components/what-have-i-done';\nimport Misc from './components/misc';\nimport Footer from './components/footer';\nimport './styles.scss';\n\nconst Main = (): JSX.Element => {\n  return (\n    <div className='flex flex-col px-10 mx-auto items-center container-custom mt-4'>\n      <Header name='Gabriel Antelo' />\n      <WhatIDo />\n      <WhatIKnow />\n      <WhatIveDone />\n      <Misc />\n      <Footer />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}